--create data base
CREATE DATABASE ONLINESHOP

--create tables
use onlineShop;
CREATE TABLE PERSON
(
    SSN CHAR(9) NOT NULL,
    Telephone_no CHAR(11) NOT NULL,
    password VARCHAR(15) NOT NULL,
    Date_of_Birth DATE NOT NULL,
    Email VARCHAR(20) NOT NULL,
    UserName VARCHAR(20) NOT NULL,

    CONSTRAINT PERSON_PK PRIMARY KEY(SSN),
	CONSTRAINT PERSON_PASS check(password like '%[0-9]%' and password like '%[A-Z]%' and password like '%[!@#$%a^&*()-_+=.,;:`"`~]%' and len(password) >= 8)
);

ALTER TABLE PERSON
alter column Email VARCHAR(50);

--add constraint on email
ALTER TABLE PERSON
ADD CONSTRAINT PERSON_EMAIL Check(Email like '%@%' and Email like '%.com');
--fill up table
BULK
INSERT person
FROM 'D:\colleage\3_2\database\project\data\person.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO
--create feedback table
CREATE TABLE FEEDBACK
(
	FEEDBACK_ID varchar(10),
	POST_DATE date NOT NULL,
	RATING float NOT NULL,

	CONSTRAINT FEEDBACK_PK PRIMARY KEY (FEEDBACK_ID)
);
--fill up table
BULK
INSERT FEEDBACK
FROM 'D:\colleage\3_2\database\project\data\feedback.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create users table
CREATE TABLE USERS
(
    SSN CHAR(9) NOT NULL,
    IsVerified BIT NOT NULL,
    FeedbackID varchar(10),
    CONSTRAINT USERS_PK PRIMARY KEY(SSN),
    CONSTRAINT USERS_PERSON_FK FOREIGN KEY(SSN) REFERENCES PERSON(SSN) ON UPDATE NO ACTION ON DELETE CASCADE, 
    CONSTRAINT USERS_FEEDBACK_FK FOREIGN KEY(FeedbackID) REFERENCES Feedback(FEEDBACK_ID) ON DELETE SET NULL ON UPDATE NO ACTION
);
--add attribute to created table 
ALTER TABLE USERS
ADD ACTIVE BIT NOT NULL;

-- Create function for disjoint (should be located at Scalar valued functions folder)
CREATE FUNCTION userNotExistsInStaff 
(
	-- Add the parameters for the function here
	@field CHAR(9)
)
RETURNS bit
AS
BEGIN
	IF @field not in (select STAFF.SSN from STAFF)
        return 1
    return 0

END

-- Add disjoint constraint between users and staff to keep ssn unique
alter table USERS
add  CONSTRAINT users_disjoint_staff check(dbo.userNotExistsInStaff(users.ssn) = 1);

--MAKE FEEDBACK ID UNIQUE FOR EACH USER and allow nulls
CREATE UNIQUE NONCLUSTERED INDEX idx_col1
ON USERS(FeedbackID)
WHERE FeedbackID IS NOT NULL;

--fill up users table
BULK
INSERT USERS
FROM 'D:\colleage\3_2\database\project\data\USERS.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create seller table
CREATE TABLE SELLER
(
    SELLER_SSN CHAR(9) NOT NULL,
    rating INTEGER,

	CONSTRAINT SELLER_PK PRIMARY KEY(SELLER_SSN) ,
    
    CONSTRAINT SELLER_USER_FK FOREIGN KEY(SELLER_SSN) REFERENCES USERS(SSN) ON UPDATE NO ACTION ON DELETE CASCADE
);

--change data type of acreated column
ALTER TABLE SELLER
ALTER COLUMN rating FLOAT;
--fill up seller table
BULK
INSERT SELLER
FROM 'D:\colleage\3_2\database\project\data\SELLER.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create buyer table
CREATE TABLE BUYER
(
    BUYER_SSN CHAR(9) NOT NULL,
    no_of_Purchases INTEGER,
    CONSTRAINT BUYER_PK PRIMARY KEY(BUYER_SSN),
    CONSTRAINT BUYER_USER_FK FOREIGN KEY(BUYER_SSN) REFERENCES USERS(SSN) ON DELETE CASCADE ON UPDATE NO ACTION
);

--fill up buyer table
BULK
INSERT BUYER
FROM 'D:\colleage\3_2\database\project\data\BUYER.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create staff table
CREATE TABLE STAFF
(
    SSN CHAR(9) NOT NULL,
    Hiring_Date DATE NOT NULL,
    Salary INTEGER NOT NULL,
    Years_of_Experience INTEGER,
    Access_key INTEGER NOT NULL,
    Daily_Work_Hours INTEGER NOT NULL,
    CONSTRAINT STAFF_PK PRIMARY KEY(SSN),
    CONSTRAINT STAFF_PERSON_FK FOREIGN KEY(SSN) REFERENCES PERSON(SSN) ON UPDATE NO ACTION ON DELETE CASCADE
);
--change data type of an attribute
alter table staff
alter column access_key varchar(10) not null;

-- Create function for disjoint (should be located at Scalar valued functions folder)
CREATE FUNCTION notExists
(
	-- Add the parameters for the function here
	@field Char(9)
)
RETURNS bit
AS
BEGIN
    IF @field not in (select users.SSN from users)
        return 1
    return 0
END

-- Add disjoint constraint between staff and users to keep ssn unique 
alter table staff
add  CONSTRAINT staff_disjoint_users check(dbo.notExists(staff.ssn) = 1);

--fill up staff table
BULK
INSERT STAFF
FROM 'D:\colleage\3_2\database\project\data\STAFF.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create payment table
CREATE TABLE PAYMENT
(
	PAYMENT_ID varchar(10),
	AMOUNT float NOT NULL,
	DATE date NOT NULL,

	constraint PAYMENT_PK PRIMARY KEY (PAYMENT_ID)
);

--fill up payment
BULK
INSERT payment
FROM 'D:\colleage\3_2\database\project\data\payment.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create cash table
CREATE TABLE Cash
(
	PAYMENT_ID varchar(10),
	ADDITIONAL_FEES float,

	CONSTRAINT CASH_PAYMENT_FK FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID)
	ON DELETE CASCADE
	ON UPDATE NO ACTION
);
--identify primary key of cash table
ALTER TABLE CASH
ALTER COLUMN PAYMENT_ID VARCHAR(10) NOT NULL;
ALTER TABLE CASH
ADD CONSTRAINT CASH_PK PRIMARY KEY(PAYMENT_ID);

--fill up cash data
BULK
INSERT cash
FROM 'D:\colleage\3_2\database\project\data\cash.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create credit table
CREATE TABLE CREDIT
(
	PAYMENT_ID varchar(10),
	CARD_NUMBER char(16) NOT NULL,
	CARD_TYPE VARCHAR(20)

	CONSTRAINT CREDIT_PK PRIMARY KEY(PAYMENT_ID),
	CONSTRAINT CREDIT_PAYMENT_FK FOREIGN KEY (PAYMENT_ID) REFERENCES Payment(PAYMENT_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE,

	CONSTRAINT CREDIT_CARD_NUMBER_CK check(CARD_NUMBER like '[0-9]')

);

--fill up credit table
BULK
INSERT credit
FROM 'D:\colleage\3_2\database\project\data\CREDIT.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create delivery table
CREATE TABLE DELIVERY(
  SHIPMENT_ID VARCHAR(12) NOT NULL,
  COMPANY_NAME VARCHAR(50) NOT NULL,
  DRIVER_INFO VARCHAR(50) NOT NULL,
  PROGRESS VARCHAR(50) NOT NULL,
  CURRENT_LOCATION VARCHAR(100) NOT NULL,
  ORDER_DATE DATE NOT NULL,
  
  CONSTRAINT DELIVERY_PK PRIMARY KEY ( SHIPMENT_ID ),
  CONSTRAINT CHECK_PROGRESS CHECK(PROGRESS IN ('NOT SHIPPED' , 'DELAYED', 'SHIPPED', 'DELIVERED')),

);

--fill up data
BULK
INSERT DELIVERY
FROM 'D:\colleage\3_2\database\project\data\DELIVERY.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

--create orders table
CREATE TABLE ORDERS
(
	ORDER_ID varchar(4),
	ORDER_DATE date NOT NULL,
	ORDER_STATE varchar(10) NOT NULL,
	SSN CHAR(9) NOT NULL,
	PAYMENT_ID varchar(10)  NOT NULL,
	SHIPMENT_ID VARCHAR(12) NOT NULL,

	CONSTRAINT ORDERS_PK PRIMARY KEY (ORDER_ID),
	CONSTRAINT ORDERS_PAYMENT_FK FOREIGN KEY (PAYMENT_ID) REFERENCES Payment(PAYMENT_ID)
	ON DELETE CASCADE 
	ON UPDATE NO ACTION,

	CONSTRAINT ORDERS_BUYER_FK FOREIGN KEY (SSN) REFERENCES BUYER(BUYER_SSN)
	ON DELETE CASCADE
	ON UPDATE NO ACTION,

	CONSTRAINT ORDERS_DELIVERY_FK FOREIGN KEY (SHIPMENT_ID) REFERENCES Delivery(SHIPMENT_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE,

	CONSTRAINT ORDERS_STATE check(ORDER_STATE like 'PICKING' or  ORDER_STATE like 'PACKING' or ORDER_STATE like 'SHIPPING' or ORDER_STATE like 'DELIVERED')
);

--fill up data
BULK
INSERT ORDERS
FROM 'D:\colleage\3_2\database\project\data\ORDERS.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

-- create inventory table
CREATE TABLE Inventory(
  INV_ID VARCHAR(12) NOT NULL,
  LOCATION VARCHAR(100) NOT NULL,
  
  PRIMARY KEY ( INV_ID ),
);
--fill up with data
BULK
INSERT iNVENTORY
FROM 'D:\colleage\3_2\database\project\data\INVENTORY.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

CREATE TABLE CATEGORY(
CAT_ID VARCHAR(9) NOT NULL,
CAT_NAME VARCHAR(20) NOT NULL,
CAT_DESCRIPTION VARCHAR(100),

CONSTRAINT CATEGORY_PK PRIMARY KEY(CAT_ID)
);
ALTER TABLE CATEGORY
ALTER COLUMN CAT_NAME VARCHAR(25) NOT NULL;

BULK
INSERT CATEGORY
FROM 'D:\colleage\3_2\database\project\data\CATEGORY.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

CREATE TABLE PRODUCT(
PID VARCHAR(12) NOT NULL,
NAME VARCHAR(20) NOT NULL,
PRICE FLOAT NOT NULL,
DESCRIPTION VARCHAR(100),
CAT_ID VARCHAR(9) NOT NULL,

CONSTRAINT PRODUCT_PK PRIMARY KEY(PID),
CONSTRAINT PRODUCT_CATEGORY_FK FOREIGN KEY(CAT_ID) REFERENCES CATEGORY
ON DELETE NO ACTION
ON UPDATE NO ACTION
);

BULK
INSERT PRODUCT
FROM 'D:\colleage\3_2\database\project\data\PRODUCTS.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

-- @block
CREATE TABLE Stock(
  INV_ID VARCHAR(12) NOT NULL,
  PID VARCHAR(12) NOT NULL,
  PQuantity INT NOT NULL,
  Date DATE NOT NULL,
  
  CONSTRAINT STOCK_PK PRIMARY KEY ( INV_ID, PID ),
  CONSTRAINT STOCK_PRODUCT_FK FOREIGN KEY (PID) REFERENCES Product(PID) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT STOCK_INVENTORY_FK FOREIGN KEY (INV_ID) REFERENCES Inventory(INV_ID) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT STOCK_PQUANTITY_CK CHECK (PQuantity >= 0)
);

BULK
INSERT STOCK
FROM 'D:\colleage\3_2\database\project\data\STOCK.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

CREATE TABLE Request(
  ORDER_ID VARCHAR(4) NOT NULL,
  INV_ID VARCHAR(12) NOT NULL,
  PID VARCHAR(12) NOT NULL,
  Date DATE NOT NULL,

  PRIMARY KEY ( ORDER_ID, INV_ID, PID ),
  FOREIGN KEY (ORDER_ID) REFERENCES Orders(ORDER_ID) ON DELETE CASCADE ON UPDATE NO ACTION,
  FOREIGN KEY (INV_ID) REFERENCES Inventory(INV_ID) ON DELETE CASCADE ON UPDATE NO ACTION,
  FOREIGN KEY (PID) REFERENCES Product(PID) ON DELETE CASCADE ON UPDATE NO ACTION
);

BULK
INSERT REQUEST
FROM 'D:\colleage\3_2\database\project\data\REQUEST.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO
CREATE TABLE TECHNICAL_SUPPORT(
SSN CHAR(9) NOT NULL,
RATING FLOAT,

CONSTRAINT TECHNICAL_SUPPORT_PK PRIMARY KEY(SSN),
CONSTRAINT TECHNICAL_SUPPORT_STAFF_FK FOREIGN KEY(SSN) REFERENCES STAFF(SSN) ON UPDATE NO ACTION ON DELETE CASCADE, 

);

BULK
INSERT TECHNICAL_SUPPORT
FROM 'D:\colleage\3_2\database\project\data\TECHNICAL_SUPPORT.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

CREATE TABLE RATE(
USER_SSN CHAR(9),
T_S_SSN CHAR(9),

CONSTRAINT RATE_PK PRIMARY KEY(USER_SSN,T_S_SSN),
CONSTRAINT RATE_TECHNICAL_SUPPORT_FK FOREIGN KEY(T_S_SSN) REFERENCES TECHNICAL_SUPPORT(SSN) ON UPDATE NO ACTION ON DELETE CASCADE, 
CONSTRAINT RATE_USERS_FK FOREIGN KEY(USER_SSN) REFERENCES USERS(SSN) 
);

ALTER TABLE RATE
ADD RATING_VALUE FLOAT NOT NULL;

BULK
INSERT RATE
FROM 'D:\colleage\3_2\database\project\data\RATE.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

CREATE TABLE SELL(
SSN CHAR(9),
PID VARCHAR(12),

CONSTRAINT SELL_PK PRIMARY KEY(SSN,PID),
CONSTRAINT SELL_SELLER_FK FOREIGN KEY(SSN) REFERENCES SELLER ON UPDATE NO ACTION ON DELETE NO ACTION, 
CONSTRAINT SELL_PRODUCT_FK FOREIGN KEY(PID) REFERENCES PRODUCT ON UPDATE NO ACTION ON DELETE NO ACTION, 
);

BULK
INSERT SELL
FROM 'D:\colleage\3_2\database\project\data\SELL.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO

CREATE TABLE RATING (
ID VARCHAR(12),
RATING_VALUE FLOAT NOT NULL,
FOUND_USEFULL INT DEFAULT 0,
DATE DATE NOT NULL,
SSN CHAR(9) NOT NULL,
PID VARCHAR(12) NOT NULL,

CONSTRAINT RATING_PK PRIMARY KEY(ID),
CONSTRAINT RATING_BUYER_FK FOREIGN KEY(SSN) REFERENCES BUYER ON UPDATE NO ACTION ON DELETE NO ACTION, 

CONSTRAINT RATING_PRODUCT_FK FOREIGN KEY(PID) REFERENCES PRODUCT ON UPDATE NO ACTION ON DELETE NO ACTION
);

BULK
INSERT RATING
FROM 'D:\colleage\3_2\database\project\data\RATING.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO


CREATE TABLE ADMIN(
SSN CHAR(9) NOT NULL,
ROLE VARCHAR(30) NOT NULL,
INV_ID VARCHAR(12),

CONSTRAINT ADMIN_PK PRIMARY KEY(SSN),
CONSTRAINT ADMIN_STAFF_FK FOREIGN KEY(SSN) REFERENCES STAFF(SSN) ON UPDATE NO ACTION ON DELETE CASCADE, 
CONSTRAINT ADMIN_ROLE_CK CHECK(ROLE IN ('Content Manager' , 'Marketing Manager', 'Customer Support Manager', 'Technical Manager', 'Analytics Manager', 'Payment and Shipping Manager', 'Sales Manager')),
);

BULK
INSERT ADMIN
FROM 'D:\colleage\3_2\database\project\data\admins.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO
--create manage table
CREATE TABLE MANAGE(
SSN CHAR(9),
PID VARCHAR(12)
CONSTRAINT MANAGE_PK PRIMARY KEY(SSN, PID),
CONSTRAINT MANAGE_ADMIN_FK FOREIGN KEY(SSN) REFERENCES ADMIN(SSN) ON UPDATE NO ACTION ON DELETE CASCADE, 
CONSTRAINT MANAGE_PRODUCT_CK FOREIGN KEY(PID) REFERENCES PRODUCT  ON UPDATE NO ACTION ON DELETE CASCADE,
);

--fill up data
BULK
INSERT manage
FROM 'D:\colleage\3_2\database\project\data\mange.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO
--create includes relation table
CREATE TABLE INCLUDES(
PID VARCHAR(12),
ORDER_ID VARCHAR(4),
QUANTINTY INTEGER,

CONSTRAINT INCLUDES_PK PRIMARY KEY(ORDER_ID, PID),
CONSTRAINT INCLUDES_ORDER_FK FOREIGN KEY(ORDER_ID) REFERENCES ORDERS ON UPDATE NO ACTION ON DELETE CASCADE, 
CONSTRAINT INCLUDES_PRODUCT_CK FOREIGN KEY(PID) REFERENCES PRODUCT  ON UPDATE NO ACTION ON DELETE CASCADE,
);

--fill up table
BULK
INSERT INCLUDES
FROM 'D:\colleage\3_2\database\project\data\INCLUDES.csv'
WITH
(
FIELDTERMINATOR = ',',
ROWTERMINATOR = '\n'
)
GO
